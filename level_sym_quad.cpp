#include <vector>

//***********************************************************************************************************

void level_sym_quad( int N, std::vector<double> &mu, std::vector<double> &eta, std::vector<double> &wi )

//***********************************************************************************************************
//
//  LEVEL_SYM_QUAD - Level-Symmetric Quadrature Set for Discrete Ordinates (SN) Radiation Transport Calculations
//
//  Reference: 
//             E. E. Lewis and W. F. Miller. Computational Methods of Neutron Transport. John Wiley and Sons, Inc., 
//             New York, NY, 1984.
//
//  Licensing:
//             The MIT License (MIT)
//
//			   Copyright (c) [2016] [Mario I. Ortega]
//
//             Permission is hereby granted, free of charge, to any person obtaining a copy of this software and 
//             associated documentation files (the "Software"), to deal in the Software without restriction, including
//             without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
//             copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the 
//             following conditions:
//
//             The above copyright notice and this permission notice shall be included in all copies or substantial 
//             portions of the Software.
//
//             THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
//             LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
//             IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
//             WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
//             OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//  Author: Mario I. Ortega, University of California, Berkeley
//
//  Modified: 
//             28 April 2016
//
//  Parameters: 
//             Input, int N, level-symmetric quadrature order, must be either 2, 4, 6, 8, 16.
//             Input, vector<double> &mu, pointer to vector for angle mu.
//             Input, vector<double> &eta, pointer to vector for angle eta. 
//             Input, vector<double> &wi, pointer to vector for quadrature weights.
{

	if ( N == 2 )
	{
		double mu_init[] = { 0.5773503, -0.5773503, 0.5773503, -0.5773503 };
		mu.assign(mu_init,mu_init+N*(N+2)/2);

		double eta_init[] = { 0.5773503, 0.5773503, -0.5773503, -0.5773503 };
		eta.assign(eta_init,eta_init+N*(N+2)/2);

		double wi_init[] = { 1, 1, 1, 1 };
		wi.assign(wi_init,wi_init+N*(N+2)/2);
	}
	else if ( N == 4 )
	{
		double mu_init[] = {  0.8688903, 0.3500212, 0.3500212, -0.8688903, -0.3500212, -0.3500212,
							 -0.8688903, -0.3500212, -0.3500212, 0.8688903, 0.3500212, 0.3500212 };
	    mu.assign(mu_init,mu_init+N*(N+2)/2);

	    double eta_init[] = { 0.3500212, 0.8688903, 0.3500212, 0.3500212, 0.8688903, 0.3500212,
							 -0.3500212, -0.8688903, -0.3500212, -0.3500212, -0.8688903, -0.3500212 };
		eta.assign(eta_init,eta_init+N*(N+2)/2);
		wi.assign(N*(N+2)/2,1./3.);
	}
	else if ( N == 6 )
	{
		double mu_init[] = { 0.9261808, 0.6815076, 0.6815076, 0.2666355, 0.2666355, 0.2666355,
						   -0.9261808, -0.6815076, -0.6815076, -0.2666355, -0.2666355, -0.2666355,
 						    0.9261808, 0.6815076, 0.6815076, 0.2666355, 0.2666355, 0.2666355,
						   -0.9261808, -0.6815076, -0.6815076, -0.2666355, -0.2666355, -0.2666355 };
		mu.assign(mu_init,mu_init+N*(N+2)/2);

		double eta_init[] = { 0.2666355, 0.6815076, 0.2666355, 0.9261808, 0.6815076, 0.2666355,
 							  0.2666355, 0.6815076, 0.2666355, 0.9261808, 0.6815076, 0.2666355,
							 -0.2666355, -0.6815076, -0.2666355, -0.9261808, -0.6815076, -0.2666355,
							 -0.2666355, -0.6815076, -0.2666355, -0.9261808, -0.6815076, -0.2666355 };
		eta.assign(eta_init,eta_init+N*(N+2)/2);

		double wi_init[] = { 0.1761263, 0.1572071, 0.1572071, 0.1761263, 0.1572071, 0.1761263,
							 0.1761263, 0.1572071, 0.1761263, 0.1761263, 0.1572071, 0.1761263,
							 0.1761263, 0.1572071, 0.1761263, 0.1761263, 0.1572071, 0.1761263,
							 0.1761263, 0.1572071, 0.1761263, 0.1572071, 0.1572071, 0.1761263 };
		wi.assign(wi_init,wi_init+N*(N+2)/2);
	}
	else if ( N == 8 )
	{
		double mu_init[] = { 0.9511897, 0.7867958, 0.7867958, 0.5773503, 0.5773503, 0.5773503,
							 0.2182179, 0.2182179, 0.2182179, 0.2182179, -0.9511897, -0.7867958,
						    -0.7867958, -0.5773503, -0.5773503, -0.5773503, -0.2182179, -0.2182179,
							-0.2182179, -0.2182179, 0.9511897, 0.7867958, 0.7867958, 0.5773503,
							 0.5773503, 0.5773503, 0.2182179, 0.2182179, 0.2182179, 0.2182179,
							-0.9511897, -0.7867958, -0.7867958, -0.5773503, -0.5773503, -0.5773503,
							-0.2182179, -0.2182179, -0.2182179, -0.2182179 };
		mu.assign(mu_init,mu_init+N*(N+2)/2);

		double eta_init[] = { 0.2182179, 0.5773503, 0.2182179, 0.7867958, 0.5773503, 0.2182179,
							  0.9511897, 0.7867958, 0.5773503, 0.2182179, 0.2182179, 0.5773503,
							  0.2182179, 0.7867958, 0.5773503, 0.2182179, 0.9511897, 0.7867958,
							  0.5773503, 0.2182179, -0.2182179, -0.5773503, -0.2182179, -0.7867958,
							 -0.5773503, -0.2182179, -0.9511897, -0.7867958, -0.5773503, -0.2182179,
							 -0.2182179, -0.5773503, -0.2182179, -0.7867958, -0.5773503, -0.2182179,
							 -0.9511897, -0.7867958, -0.5773503, -0.2182179 };
		eta.assign(eta_init,eta_init+N*(N+2)/2);

		double wi_init[] = { 0.1209877, 0.0907407, 0.0907407, 0.0907407, 0.0925926, 0.0907407,
							 0.1209877, 0.0907407, 0.0907407, 0.1209877, 0.1209877, 0.0907407,
							 0.0907407, 0.0907407, 0.0925926, 0.0907407, 0.1209877, 0.0907407,
							 0.0907407, 0.1209877, 0.1209877, 0.0907407, 0.0907407, 0.0907407,
							 0.0925926, 0.0907407, 0.1209877, 0.0907407, 0.0907407, 0.1209877,
							 0.1209877, 0.0907407, 0.0907407, 0.0907407, 0.0925926 ,0.0907407,
							 0.1209877, 0.0907407, 0.0907407, 0.1209877 };
		wi.assign(wi_init,wi_init+N*(N+2)/2);
	}
	else if ( N == 16 )
	{
		double mu_init[] = { 0.9805009, 0.9092855, 0.9092855, 0.8319966, 0.8319966, 0.8319966,
							 0.7467506, 0.7467506, 0.7467506, 0.7467506, 0.6504264, 0.6504264,
						     0.6504264, 0.6504264, 0.6504264, 0.5370966, 0.5370966, 0.5370966,
							 0.5370966, 0.5370966, 0.5370966, 0.3922893, 0.3922893, 0.3922893,
							 0.3922893, 0.3922893, 0.3922893, 0.3922893, 0.1389568, 0.1389568,
							 0.1389568, 0.1389568, 0.1389568, 0.1389568, 0.1389568, 0.1389568,
							-0.9805009, -0.9092855, -0.9092855, -0.8319966, -0.8319966, -0.8319966,
							-0.7467506, -0.7467506, -0.7467506, -0.7467506, -0.6504264, -0.6504264,
							-0.6504264, -0.6504264, -0.6504264, -0.5370966, -0.5370966, -0.5370966,
							-0.5370966, -0.5370966, -0.5370966, -0.3922893, -0.3922893, -0.3922893,
							-0.3922893, -0.3922893, -0.3922893, -0.3922893, -0.1389568, -0.1389568,
							-0.1389568, -0.1389568, -0.1389568, -0.1389568, -0.1389568, -0.1389568,
							-0.9805009, -0.9092855, -0.9092855, -0.8319966, -0.8319966, -0.8319966,
							-0.7467506, -0.7467506, -0.7467506, -0.7467506, -0.6504264, -0.6504264,
							-0.6504264, -0.6504264, -0.6504264, -0.5370966, -0.5370966, -0.5370966,
							-0.5370966, -0.5370966, -0.5370966, -0.3922893, -0.3922893, -0.3922893,
							-0.3922893, -0.3922893, -0.3922893, -0.3922893, -0.1389568, -0.1389568,
							-0.1389568, -0.1389568, -0.1389568, -0.1389568, -0.1389568, -0.1389568,
							 0.9805009, 0.9092855, 0.9092855, 0.8319966, 0.8319966, 0.8319966,
							 0.7467506, 0.7467506, 0.7467506, 0.7467506, 0.6504264, 0.6504264,
							 0.6504264, 0.6504264, 0.6504264, 0.5370966, 0.5370966, 0.5370966,
							 0.5370966, 0.5370966, 0.5370966, 0.3922893, 0.3922893, 0.3922893,
							 0.3922893, 0.3922893, 0.3922893, 0.3922893, 0.1389568, 0.1389568,
							 0.1389568, 0.1389568, 0.1389568, 0.1389568, 0.1389568, 0.1389568 };
		mu.assign(mu_init,mu_init+N*(N+2)/2);

		double eta_init[] = { 0.1389568, 0.3922893, 0.1389568, 0.5370966, 0.3922893, 0.1389568,
         					  0.6504264, 0.5370966, 0.3922893, 0.1389568, 0.7467506, 0.6504264,
         					  0.5370966, 0.3922893, 0.1389568, 0.8319966, 0.7467506, 0.6504264,
        					  0.5370966, 0.3922893, 0.1389568, 0.9092855, 0.8319966, 0.7467506,
        					  0.6504264, 0.5370966, 0.3922893, 0.1389568, 0.9805009, 0.9092855,
        					  0.8319966, 0.7467506, 0.6504264, 0.5370966, 0.3922893, 0.1389568,
        					  0.1389568, 0.3922893, 0.1389568, 0.5370966, 0.3922893, 0.1389568,
        					  0.6504264, 0.5370966, 0.3922893, 0.1389568, 0.7467506, 0.6504264,
        					  0.5370966, 0.3922893, 0.1389568, 0.8319966, 0.7467506, 0.6504264,
        					  0.5370966, 0.3922893, 0.1389568, 0.9092855, 0.8319966, 0.7467506,
        					  0.6504264, 0.5370966, 0.3922893, 0.1389568, 0.9805009, 0.9092855,
        					  0.8319966, 0.7467506, 0.6504264, 0.5370966, 0.3922893, 0.1389568,
        					 -0.1389568, -0.3922893, -0.1389568, -0.5370966, -0.3922893, -0.1389568,
        					 -0.6504264, -0.5370966, -0.3922893, -0.1389568, -0.7467506, -0.6504264,
        					 -0.5370966, -0.3922893, -0.1389568, -0.8319966, -0.7467506, -0.6504264,
        					 -0.5370966, -0.3922893, -0.1389568, -0.9092855, -0.8319966, -0.7467506,
        					 -0.6504264, -0.5370966, -0.3922893, -0.1389568, -0.9805009, -0.9092855,
        					 -0.8319966, -0.7467506, -0.6504264, -0.5370966, -0.3922893, -0.1389568,
        					 -0.1389568, -0.3922893, -0.1389568, -0.5370966, -0.3922893, -0.1389568,
        					 -0.6504264, -0.5370966, -0.3922893, -0.1389568, -0.7467506, -0.6504264,
        					 -0.5370966, -0.3922893, -0.1389568, -0.8319966, -0.7467506, -0.6504264,
        					 -0.5370966, -0.3922893, -0.1389568, -0.9092855, -0.8319966, -0.7467506,
        					 -0.6504264, -0.5370966, -0.3922893, -0.1389568, -0.9805009, -0.9092855,
        					 -0.8319966, -0.7467506, -0.6504264, -0.5370966, -0.3922893, -0.1389568 };
        eta.assign(eta_init,eta_init+N*(N+2)/2);

        double wi_init[] = { 0.0489872, 0.0413296, 0.0413296, 0.0212326, 0.0360486, 0.0212326,
							 0.0256207, 0.0144589, 0.0144589, 0.0256207, 0.0256207, 0.0344958,
							 0.0085179, 0.0344958, 0.0256207, 0.0212326, 0.0144589, 0.0085179,
							 0.0085179, 0.0144589, 0.0212326, 0.0413296, 0.0360486, 0.0144589,
							 0.0344958, 0.0144589, 0.0360486, 0.0413296, 0.0489872, 0.0413296,
							 0.0212326, 0.0256207, 0.0256207, 0.0212326, 0.0413296, 0.0489872,
							 0.0489872, 0.0413296, 0.0413296, 0.0212326, 0.0360486, 0.0212326,
							 0.0256207, 0.0144589, 0.0144589, 0.0256207, 0.0256207, 0.0344958,
							 0.0085179, 0.0344958, 0.0256207, 0.0212326, 0.0144589, 0.0085179,
							 0.0085179, 0.0144589, 0.0212326, 0.0413296, 0.0360486, 0.0144589,
							 0.0344958, 0.0144589, 0.0360486, 0.0413296, 0.0489872, 0.0413296,
							 0.0212326, 0.0256207, 0.0256207, 0.0212326, 0.0413296, 0.0489872,
						     0.0489872, 0.0413296, 0.0413296, 0.0212326, 0.0360486, 0.0212326,
							 0.0256207, 0.0144589, 0.0144589, 0.0256207, 0.0256207, 0.0344958,
							 0.0085179, 0.0344958, 0.0256207, 0.0212326, 0.0144589, 0.0085179,
							 0.0085179, 0.0144589, 0.0212326, 0.0413296, 0.0360486, 0.0144589,
							 0.0344958, 0.0144589, 0.0360486, 0.0413296, 0.0489872, 0.0413296,
							 0.0212326, 0.0256207, 0.0256207, 0.0212326, 0.0413296, 0.0489872,
							 0.0489872, 0.0413296, 0.0413296, 0.0212326, 0.0360486, 0.0212326,
							 0.0256207, 0.0144589, 0.0144589, 0.0256207, 0.0256207, 0.0344958,
							 0.0085179, 0.0344958, 0.0256207, 0.0212326, 0.0144589, 0.0085179,
							 0.0085179, 0.0144589, 0.0212326, 0.0413296, 0.0360486, 0.0144589,
							 0.0344958, 0.0144589, 0.0360486, 0.0413296, 0.0489872, 0.0413296,
							 0.0212326, 0.0256207, 0.0256207, 0.0212326, 0.0413296, 0.0489872 };
		wi.assign(wi_init,wi_init+N*(N+2)/2);
	}

}